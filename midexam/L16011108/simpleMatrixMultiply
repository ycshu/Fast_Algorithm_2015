#include <stdio.h>
#include <stdlib.h>]
#define MAX_TERMS 101
typedef struct
{
	int col;
	int row;
	int value;
	/*a[0]save number of nonzero term ;
	for i!=0,a[i] save value of non-zeroterm at the index of orign matrix  M[a[i].row][a[i].col] */
}term;
term a[MAX_TERMS];
void transpose(term[], term[]);
void mmult(term a[], term b[], term d[]);
void storeSum(term d[], int *totalD, int row, int column, int *sum);
int main(void)
{
	int M[6][6] = { { 15, 0, 0, 22, 0, -15 }, { 0, 11, 3 }, { 0, 0, 0, -6 }, {}, { 91 }, { 0, 0, 28 } };

	system("pause");
	return 0;
}
void transpose(term a[], term b[])
{
	int n,i, j, currentb;
	n = a[0].value;
	b[0].row = a[0].col;
	b[0].col = a[0].row;
	b[0].value = n;
	if (n > 0)
	{
		currentb = 1;
		for (i = 0; i < a[0].col; i++)
		for (j = 1; j < +n; j++)
		if (a[j].col == i)
		{
			b[currentb].row = a[j].col;
			b[currentb].col = a[j].row;
			b[currentb].value = a[j].value;
			currentb++;
		}
	}
}
void mmult(term a[], term b[], term d[])
{
	/*規劃變數*/
	int i, j, column, totalB = b[0].value, totalD = 0;
	/*規劃變數 A矩陣*/
	int rowsA = a[0].row, colsA = a[0].col, totalA = a[0].value; int colsB = b[0].col;
	/*規劃變數 計算*/
	int rowBegin = 1, row = a[1].row, sum = 0;
	term NewB[MAX_TERMS];
	if (colsA != b[0].row)
	{
		fprintf(stderr, "Incompatible \n");
		exit(EXIT_FAILURE);
	}
	transpose(b, NewB);
	/*邊界條件*/
	a[totalA + 1].row = rowsA;
	NewB[totalB + 1].row = colsB;
	NewB[totalB + 1].col = 0;
	for (i = 1; i < totalA;)
	{
		column = NewB[1].row;
		for (j = 1; j < totalB + 1;)
		{

			if (a[i].row != row){
				storeSum(d, &totalD, row, column, &sum);
				i = rowBegin;
				for (; NewB[j].row == column; j++)
					;
				column = NewB[j].row;
			}
		}
	}

	}
void storeSum(term d[], int *totalD, int row, int column, int *sum)
{/*若 *sum !=0, 則儲存傳入的 row,column資訊於d 陣列的第 *totalD+1 位置 ie:d[*totalD+1] */
	if (*sum)
	if (*totalD<MAX_TERMS)
	{
		d[++*totalD].row = row; /*注意是*totalD為指標變數 以下*totalD 皆為傳入值+1*/
		d[*totalD].col = column;
		d[*totalD].value = *sum;
		*sum = 0;/* *sum為指標變數 將 此舉 將sum變數內容歸零*/
	}
	else
	{
		fprintf(stderr, "Numbers of term in product exceeds %d\n", MAX_TERMS);
		exit(EXIT_FAILURE);
	}

}
